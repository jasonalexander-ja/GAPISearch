@using Google.Apis.Auth.AspNetCore3
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Drive.v3
@using Google.Apis.Drive.v3.Data
@using Google.Apis.Services
@inject ISnackbar Snackbar

@page "/"

@attribute [GoogleScopedAuthorize(DriveService.ScopeConstants.DriveReadonly)]

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3">Google Drive Search</MudText>

<MudGrid Justify="Justify.Center">
    <MudItem xs="3" />
    <MudItem xs="6" Style="display: flex;">
        <MudTextField @bind-Value="SearchString" Label="Search" Variant="Variant.Text" OnKeyPress="OnKeyPress"></MudTextField>
        <MudButton OnClick="Search" Variant="Variant.Filled">Search</MudButton>
    </MudItem>
    <MudItem xs="3" />
    <MudItem xs="3" />
    <MudItem xs="6">
        <MudTable Items="@Files" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@Loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>File Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="File name">@context.Name</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="3" />
</MudGrid>



    @code {
    public string SearchString { get; set; } = "";
    [Inject]
    private IGoogleAuthProvider? Auth { get; set; }
    private GoogleCredential? Cred { get; set; }
    public List<File> Files { get; set; } = new List<File>();
    public bool Loading { get; set; } = false;

    public async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await Search();
    }

    public async Task Search() 
    {
        string NormalisedSearchString = SearchString.Trim().ToLower().Replace("'", "\'");
        if (string.IsNullOrEmpty(NormalisedSearchString))
        {
            Snackbar.Add("Please provide a search string. ", Severity.Warning);
            return;
        }

        Loading = true;
        StateHasChanged();

        var service = new DriveService(new BaseClientService.Initializer
        {
            HttpClientInitializer = Cred
        });
        var fileService = service.Files.List();
        fileService.Q = $"name contains '{NormalisedSearchString}'";
        fileService.Corpora = "allDrives";
        fileService.SupportsAllDrives = true;
        fileService.SupportsTeamDrives = true;
        fileService.IncludeItemsFromAllDrives = true;

        try
        {
            var files = await fileService.ExecuteAsync();
            Files = files.Files.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching GDrive: {ex.Message}", Severity.Error);
        }

        Loading = false;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Auth == null)
        {
            Snackbar.Add("Injected authorisation is null. ", Severity.Error);
            goto End;
        }

        if (Cred is not null)
            goto End;
        
        try 
        {
            Cred = await Auth.GetCredentialAsync();
            if (Cred == null)
            {
                Snackbar.Add("Failed to get GAPI Credentials. ", Severity.Error);
                goto End;
            }
        }
        catch (Exception ex) 
        {
            Snackbar.Add($"Error encountered: {ex.Message}", Severity.Error);
        }

        End:
        await base.OnParametersSetAsync();
    }
}
