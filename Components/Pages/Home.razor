@using Google.Apis.Auth.AspNetCore3
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Drive.v3
@using Google.Apis.Services

@page "/"

@attribute [GoogleScopedAuthorize(DriveService.ScopeConstants.DriveReadonly)]

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h1">Hello, world!</MudText>

<MudTable Items="@FileNames.Take(4)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@Loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>File Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="File name">@context</MudTd>
    </RowTemplate>
</MudTable>



@code {

    [Inject]
    private IGoogleAuthProvider? Auth { get; set; }

    public List<string> FileNames { get; set; } = new List<string>();

    public bool Loading { get; set; } = true;


    protected override async Task OnParametersSetAsync()
    {
        if (Auth == null)
        {
            Console.WriteLine("Auth is null. ");
            goto End;
        }
        
        try 
        {
            GoogleCredential cred = await Auth.GetCredentialAsync();
            if (cred == null)
            {
                Console.WriteLine("Cred is null. ");
                goto End;
            }
            var service = new DriveService(new BaseClientService.Initializer
            {
                HttpClientInitializer = cred
            });
            var files = await service.Files.List().ExecuteAsync();
            var fileNames = files.Files.Select(x => x.Name).ToList();
            Console.WriteLine($"Found `{fileNames.Count()}` files. ");
            foreach (string fileName in fileNames)
            {
                Console.WriteLine(fileName);
            }
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error encountered: {ex.Message}");
        }

        End:
        await base.OnParametersSetAsync();
    }
}
